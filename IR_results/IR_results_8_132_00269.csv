label,id,text
1,3046613,"I have a TextView that holds a Spannable string.  The string contains a bunch of text, the first word of which is double the typesize as the rest of the string. The problem is that the line spacing between the first and second line is much larger than the line spacing between subsequent lines due to the increased size of the first word.  The spannable string was created using the following code snippet: How can I fix my TextView so that all lines have the same spacing?"
1,4712202,"I have an alphabetically sorted list of strings for the AutoCompleteTextView,
some strings have 2 words,
when I type a letter, I would that the autocomplete list that appear shows the strings sorted by the letter typed for example:
I have this list alphabetically sorted: New Orleans, Omaha, Portland, Rome now, if I type 'O', the first string in the autocomplete list, is New Orleans, the second Omaha,
but I would that Omaha is the first string because it start with 'O' and after New Orleans that doesn't"
0,3149902,"I've a column in which contains numbers or strings. The type of the column is varchar. Usually when we sort it using the string field, then all the numbers come first and then strings start. But I want all the strings first and then numbers. TIA !"
0,2134591,"Is it possible to add a little bit of space between a RadioButton and the label while still using Android's built-in components? By default the text looks a little scrunched. I've tried a couple of things: Specifying margin and padding seem to add space around the entire element (button and text, together). That makes sense, but doesn't do what I need. Creating a custom drawable via XML specifying images for the checked and unchecked states, then adding a few extra pixels to the right side of each image. This should work, but now you are stepping outside the default UI. (Not the end of the world, but not ideal) Add extra whitespace to the beginning of each label. Android seems to trim a leading space character, as in "" My String"", but specifying unicode U+00A0, as in ""\u00A0My String"" does the trick. This works, but it seems kinda dirty. Any better solutions?"
0,5630255,"I built a simple method like below I got following warning In function 'Java_com_example_hellojni_HelloJni_stringFromJNI':
  warning: passing argument 1 of 'logDebugInfo' from incompatible pointer type
  note: expected 'wchar_t *' but argument is of type 'unsigned int *' And the resulting string was not correct.
If I removed that L prefix before that formatting string, weird, it worked. But L prefixes were used everywhere in my legacy code. First I know wchar_t is not portable enough and is very compiler-specific. The size of wchar_t I expected was supposed to be 16 bits. I read some other posts which said it's 32 bits for android but wchar.h, provided by official NDK, it said wchar_t == char, really?"
